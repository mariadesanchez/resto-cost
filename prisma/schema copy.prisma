
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UnidadMedida {
  miligramos
  gramos
  kilo
  mililitros
  litro
  unidad
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}
model Merma {
  id      String    @id @default(uuid())
  name    String 
  unidadMedida UnidadMedida
  porcentaje Float
  precioAnterior Float
  precioActual Float
}
//un producto puede tener uno o mas Ingredientes y un Ingrediente puede estar en uno o mas Productos
// model Ingrediente {
//   id               String            @id @default(uuid())
//   slug             String
//   name             String            @unique
//   cantidadReceta   Float
//   unidadMedida     UnidadMedida
//   cantidadConMerma Float
//   precioConMerma   Float
//   products         ProductIngrediente[]
// }

// model Product {
//   id          String               @id @default(uuid())
//   title       String
//   description String
//   inStock     Int
//   price       Float                @default(0)
//   sizes       Size[]
//   tags        String[]
//   slug        String               @unique
//   ingredientes ProductIngrediente[]
//   category    Category             @relation(fields: [categoryId], references: [id])
//   categoryId  String
//   images      ProductImage[]
//   OrderItem   OrderItem[]
//   @@index([sizes])
// }

// model ProductIngrediente {
//   productId     String
//   product       Product     @relation(fields: [productId], references: [id])
//   ingredienteId String
//   ingrediente   Ingrediente @relation(fields: [ingredienteId], references: [id])
//   @@id([productId, ingredienteId])
// }

// enum UnidadMedida {
//   miligramos
//   gramos
//   kilo
//   mililitros
//   litro
//   unidad
// }
//-----------------------------------------Fin Relacion ProductIngrediente--------------------------------------
model Ingrediente {
  id      String    @id @default(uuid())
  slug String
  name    String    @unique
  cantidadReceta Float
  unidadMedida UnidadMedida
  cantidadConMerma Float
  precioConMerma Float
  product  Product @relation(fields: [productId], references: [id])
  productId String
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]
  tags        String[]
  slug        String   @unique
  // tags        String[] @default([])
  Ingrediente Ingrediente[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId String
  images ProductImage[]
  OrderItem    OrderItem[]
  @@index([sizes])
}

enum Size {
 CH
 M
 G
}


model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  address UserAddress?

  // Relaciones
  Order Order[]
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size
  // porcion Porcion


  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}